
<div class="calendar-heatmap">
    <div class="heatmap-header">
        <h3>@Title</h3>
    </div>
    
    <div class="heatmap-grid">
        <!-- Day labels -->
        <div class="day-labels">
            <div class="day-label">Sun</div>
            <div class="day-label">Mon</div>
            <div class="day-label">Tue</div>
            <div class="day-label">Wed</div>
            <div class="day-label">Thu</div>
            <div class="day-label">Fri</div>
            <div class="day-label">Sat</div>
        </div>

        <!-- Grid -->
        <div class="heatmap-cells">
            @for (int week = 0; week < Weeks; week++)
            {
                <div class="week-column">
                    @for (int day = 0; day < 7; day++)
                    {
                        var cellData = GetCellData(week, day);
                        var cellClass = $"heatmap-cell heatmap-{GetValueBucket(cellData?.Value ?? 0)}";
                        
                        <div class="@cellClass" 
                             title="@(cellData?.Label ?? "") - Value: @(cellData?.Value ?? 0)">
                            @if (ShowValues && cellData != null && cellData.Value > 0)
                            {
                                <span>@cellData.Value</span>
                            }
                        </div>
                    }
                </div>
            }
        </div>

        <!-- Month labels -->
        <div class="month-labels">
            @foreach (var month in GetMonthLabels())
            {
                <div class="month-label" style="left: @(month.Position)%;">@month.Name</div>
            }
        </div>
    </div>

    <!-- Legend -->
    <div class="heatmap-legend">
        <span class="legend-label">Less</span>
        <div class="legend-cell heatmap-0"></div>
        <div class="legend-cell heatmap-5"></div>
        <div class="legend-cell heatmap-10"></div>
        <div class="legend-cell heatmap-15"></div>
        <div class="legend-cell heatmap-20"></div>
        <span class="legend-label">More</span>
    </div>
</div>

@code {
    [Parameter]
    public List<HeatMapDataPoint> DataPoints { get; set; } = new();
    
    [Parameter]
    public string Title { get; set; } = "Activity HeatMap";
    
    [Parameter]
    public int Weeks { get; set; } = 12;
    
    [Parameter]
    public bool ShowValues { get; set; } = true;

    private DateTime startDate;
    private List<List<HeatMapDataPoint?>> gridData = new();

    protected override void OnParametersSet()
    {
        startDate = DateTime.Now.AddDays(-(Weeks * 7));
        OrganizeDataIntoGrid();
    }

    private void OrganizeDataIntoGrid()
    {
        gridData.Clear();
        
        for (int week = 0; week < Weeks; week++)
        {
            var weekData = new List<HeatMapDataPoint?>();
            for (int day = 0; day < 7; day++)
            {
                var currentDate = startDate.AddDays(week * 7 + day);
                var dataPoint = DataPoints.FirstOrDefault(d => d.Date.Date == currentDate.Date);
                weekData.Add(dataPoint);
            }
            gridData.Add(weekData);
        }
    }

    private HeatMapDataPoint? GetCellData(int week, int day)
    {
        if (week < gridData.Count && day < gridData[week].Count)
        {
            return gridData[week][day];
        }
        return null;
    }

    private int GetValueBucket(int value)
    {
        if (value == 0) return 0;
        if (value <= 5) return 5;
        if (value <= 10) return 10;
        if (value <= 15) return 15;
        return 20;
    }

    private List<(string Name, double Position)> GetMonthLabels()
    {
        var labels = new List<(string, double)>();
        var currentMonth = -1;
        
        for (int week = 0; week < Weeks; week++)
        {
            var date = startDate.AddDays(week * 7);
            if (date.Month != currentMonth)
            {
                currentMonth = date.Month;
                var position = (week / (double)Weeks) * 100;
                labels.Add((date.ToString("MMM"), position));
            }
        }
        
        return labels;
    }
}
